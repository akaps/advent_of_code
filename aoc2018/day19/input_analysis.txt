addi 2 16 2     IP = 16         JMP A (jumps are 2 indexes smaller than line they jump to)
seti 1 4 1      r1 = 1          K: r1 = 1
seti 1 2 4      r4 = 1          J: r4 = 1
mulr 1 4 3      r3 = r1 * r4    G: r3 = r1 * r4
eqrr 3 5 3      r3 = r3 == r5   r3 = r3 == r5
addr 3 2 2      IP = 5 + r3     JMPEZ B, C
addi 2 1 2      IP = 7          B: JMP D
addr 1 0 0      r0 = r0 + r1    C: r0 = r0 + r1
addi 4 1 4      r4 = r4 + 1     D: r4= r4 + 1
gtrr 4 5 3      r3 = r4 > r5    re3 = r4 > r5
addr 2 3 2      IP = 10 + r3    JMPEZ E, F
seti 2 7 2      IP = 2          E: JMP G
addi 1 1 1      r1 = r1 + 1     F: r1 = r1 + 1
gtrr 1 5 3      r3 = r1 > r5    r3 = r1 > r5
addr 3 2 2      IP = 14 + r3    JMPEZ H, I
seti 1 0 2      IP = 1          H: JMP J
mulr 2 2 2      IP = 256        I: JMP DONE
addi 5 2 5      r5 = r5 + 2     A: r5 = r5 + 2
mulr 5 5 5      r5 = r5 * r5    r5 = r5 * r5
mulr 2 5 5      r5 = 19 * r5    r5 = r5 * 19
muli 5 11 5     r5 = r5 * 11    r5 = r5 * 11
addi 3 4 3      r3 = r3 + 4     r3 = r3 + 4
mulr 3 2 3      r3 = r3 * 22    r3 = r3 * 22
addi 3 7 3      r3 = r3 + 7     r3 = r3 + 7
addr 5 3 5      r5 = r5 + r3    r5 = r5 + r3
addr 2 0 2      IP = 25 + r0    JMP K+ (if r0 > 1)
seti 0 1 2      IP = 0          JMP K
setr 2 1 3      r3 = 27         r3 = 27
mulr 3 2 3      r3 = r3 * 28    r3 = r3 * 28
addr 2 3 3      r3 = 29 + r3    r3 = 29 + r3
mulr 2 3 3      r3 = 30 * r3    r3 = r3 * 30
muli 3 14 3     r3 = r3 * 14    r3 = re * 14
mulr 3 2 3      r3 = r3 * 32    r3 = r3 * 32
addr 5 3 5      r5 = r5 + r3    r5 = r5 + r3
seti 0 9 0      r0 = 0          r0 = 0
seti 0 8 2      IP = 0          JMP K
